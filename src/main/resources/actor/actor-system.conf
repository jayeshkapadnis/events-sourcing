clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}

  port = 2551
  port = ${?CLUSTER_PORT}

  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_SEED_IP}

  seed-port = 2551
  seed-port = ${?CLUSTER_SEED_PORT}

  cluster.name = "event-sourcing-service"
}

database {
  host = "localhost"
  host = ${?POSTGRES_HOST}
  port = 5432
  port = ${?POSTGRES_PORT}
  db = postgres
  db = ${?DATABASE}
  pg-uri = ${database.host}":"${database.port}
  pg-uri = ${?POSTGRES_URL}
  url = "jdbc:postgresql://"${database.pg-uri}"/"${database.db}
  url = ${?DATABASE_URL}
  username = "postgres"
  username = ${?DATABASE_USERNAME}
  password = "postgres"
  password = ${?DATABASE_PASSWORD}
  schema = "public"
  schema = ${?DATABASE_SCHEMA}
}

#cluster.shutdown-after-unsuccessful-join-seed-nodes = 30s
coordinated-shutdown.exit-jvm = on

akka {
  stdout-loglevel = "DEBUG" // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = off
  loglevel = INFO
  log-dead-letters = on
  log-config-on-start = off

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    max-concurrent-recoveries = 50
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"
  }

  actor {
    provider = "cluster"
    serialize-messages = off // verify that messages are serializable
    allow-java-serialization = off

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.cxloyalty.gce.workflow.choreography.model.Message" = jackson-cbor
      "com.cxloyalty.gce.entity.UserEntity" = jackson-cbor
    }
  }

  http {
    client {
      idle-timeout = 120s
    }
    host-connection-pool {
      idle-timeout = 150s
    }
  }

  cluster {
    down-removal-margin = 7s
    sharding {
      least-shard-allocation-strategy {
        rebalance-threshold = 1
        max-simultaneous-rebalance = 5
      }
    }
  }
}

slick{
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = ${database.url}
    user = ${database.username}
    password = ${database.password}
    driver = "org.postgresql.Driver"
    profile = "slick.jdbc.PostgresProfile$"
    // hikariCP
    numThreads = 1 // number of cores
    maxConnections = 1 // 2 * numThreads + 1 (if running on an SSD)
    minConnections = 1  // same as numThreads

    connectionTestQuery = SELECT 1 // postgres doesnt support connection timeout
  }
}

jdbc-snapshot-store {
  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = ${database.schema}
    }
  }

  slick = ${slick}
}

jdbc-journal {
  tables {
    journal {
      tableName = "journal"
      schemaName = ${database.schema}
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = ${database.schema}
    }
  }
  slick = ${slick}
}